import 'package:args/command_runner.dart';
import 'package:dcli/dcli.dart';

import '../exceptions.dart';
import '../onepub_settings.dart';
import '../util/one_pub_token_store.dart';
import '../util/token_export_file.dart';

/// Imports a the onepub token generated by the onepub login process
/// and then addes it
class ImportCommand extends Command<void> {
  ///
  ImportCommand() : super() {
    argParser.addFlag('file',
        abbr: 'f',
        negatable: false,
        help: 'Imports the OnePub credentials from onepub.token.yaml');
  }

  @override
  String get description => '''
Import onepub token.
Use `onepub export` to obtain the token.

  Import the token from the ${OnePubSettings.onepubTokenKey} environment variable
  onepub import 

  Import the token from onepub.token.yaml
  onepub import --file [<path to credentials>] ''';

  @override
  String get name => 'import';

  @override
  void run() {
    import();
  }

  ///
  void import() {
    OnePubSettings.load();
    final file = argResults!['file'] as bool;

    final String onepubToken;

    if (file) {
      onepubToken = fromFile();
    } else {
      onepubToken = fromSecret();
    }
    OnePubTokenStore().save(onepubToken);
  }

  /// pull the secret from onepub.export.yaml
  String fromFile() {
    final String pathToTokenFile;
    if (argResults!.rest.length > 1) {
      throw ExitException(exitCode: 1, message: '''
The onepub import command only takes zero or one arguments. 
Found: ${argResults!.rest.join(',')}''');
    }
    if (argResults!.rest.isEmpty) {
      pathToTokenFile = join(pwd, TokenExportFile.exportFilename);
    } else {
      pathToTokenFile = argResults!.rest[0];
    }

    return TokenExportFile.load(pathToTokenFile).onepubToken;
  }

  /// pull the secret from an env var
  String fromSecret() {
    print(orange(
        'Importing OnePub secret from ${OnePubTokenStore.onepubSecretEnvKey}'));

    if (!Env().exists(OnePubTokenStore.onepubSecretEnvKey)) {
      throw ExitException(exitCode: 1, message: '''
    The OnePub environment variable ${OnePubTokenStore.onepubSecretEnvKey} doesn't exist.
    Have you added it to your CI/CD secrets?.''');
    }

    return env[OnePubTokenStore.onepubSecretEnvKey]!;
  }
}
